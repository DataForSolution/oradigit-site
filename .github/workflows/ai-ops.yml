name: AI Ops: Issue to PR

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to turn into a PR"
        required: true

permissions:
  contents: write
  pull-requests: write
  issues: read
  actions: write

jobs:
  issue_to_pr:
    # Run when: (A) an issue is labeled 'ai-change' OR (B) manual dispatch
    if: |
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'ai-change') ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    env:
      # For 'issues' events these are available; for manual runs we override below
      ISSUE_TITLE: ${{ github.event.issue.title }}
      ISSUE_BODY: ${{ github.event.issue.body }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # For manual runs, fetch the issue details using GITHUB_TOKEN
      - name: Load issue details (manual run)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          ISSUE_NUM_INPUT: ${{ inputs.issue_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          json=$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
            "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/issues/${ISSUE_NUM_INPUT}")
          title=$(printf '%s' "$json" | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>console.log(JSON.parse(d).title||''))")
          body=$(printf '%s' "$json" | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>console.log(JSON.parse(d).body||''))")
          echo "ISSUE_TITLE=$title" >> $GITHUB_ENV
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "$body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${ISSUE_NUM_INPUT}" >> $GITHUB_ENV

      - name: Ask Firebase Function for patch (from issue request)
        env:
          FB_FUNCTION_URL: ${{ vars.FB_FUNCTION_URL }}
          FB_AUTHTOKEN: ${{ secrets.FIREBASE_AUTOMATION_TOKEN }}
          ISSUE_TITLE: ${{ env.ISSUE_TITLE }}
          ISSUE_BODY: ${{ env.ISSUE_BODY }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const url = process.env.FB_FUNCTION_URL;
          const token = process.env.FB_AUTHTOKEN;
          const audit = {
            mode: 'issue',
            title: process.env.ISSUE_TITLE || '',
            body: process.env.ISSUE_BODY || ''
          };
          const promptExtras = 'Create a small, safe unified diff to implement the request above.';
          (async () => {
            const r = await fetch(url, {
              method: 'POST',
              headers: { 'Authorization': 'Bearer ' + token, 'Content-Type': 'application/json' },
              body: JSON.stringify({ audit, promptExtras })
            });
            const data = await r.json().catch(() => ({}));
            fs.writeFileSync('fb-response.json', JSON.stringify(data, null, 2));
            if (data.ok && data.patch && data.patch.includes('--- ') && data.patch.includes('+++ ')) {
              fs.writeFileSync('ai.patch', data.patch);
              console.log('Got patch from Firebase function.');
            } else {
              console.log('No valid diff from Firebase function; exiting gracefully.');
              process.exit(0);
            }
          })();
          NODE

      - name: Apply patch and commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          BR=ai/ops-${GITHUB_RUN_ID}
          git checkout -b "$BR"
          git apply --whitespace=fix ai.patch || { echo "Patch failed"; exit 0; }
          git add -A
          git commit -m "AI Ops: ${ISSUE_TITLE}" || { echo "Nothing to commit"; exit 0; }
          echo "PR_BRANCH=$BR" >> $GITHUB_ENV

      - name: Create Pull Request
        if: env.PR_BRANCH != ''
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ env.PR_BRANCH }}
          title: AI Ops: ${{ env.ISSUE_TITLE }}
          body: |
            Change generated from issue #${{ env.ISSUE_NUMBER }} (label: ai-change).

            Closes #${{ env.ISSUE_NUMBER }}
          commit-message: AI Ops: ${{ env.ISSUE_TITLE }}
          base: main
